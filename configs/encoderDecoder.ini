[DEFAULT]
experiment_name    = seperate

[HARDWARE]
device             = gpu
# ["cpu", "gpu"]
seed               = 1
# random seed setting for torch.random operations
n_GPUs             = 1
precision          = full

[DATASET]
train_set_paths    = /home/ferhatcan/Image_Datasets/ir_sr_challange/train/640_flir_hr
test_set_paths     = /home/ferhatcan/Image_Datasets/ir_sr_challange/test/640_flir_hr
rgb_range          = 1
# it is used in loss module, if normalized make it 1
batch_size         = 3
scale              = 2
include_noise      = True
noise_sigma        = 1
noise_mean         = 0
include_blur       = False
blur_radius        = 0.2
normalize          = between01
random_flips       = True
channel_number     = 1
# taken image channel
n_colors           = 1
# output image channel this should be handled in dataLoader
hr_shape           = 128, 128
downgrade          = bicubic
validation_size    = 0.2
shuffle_dataset    = True

[MODEL]
model              = encoderdecoder
self_ensemble      = False

[ENCODERDECODER]
type = seperate
# weightshare, seperate

[OPTIMIZATION]
learning_rate      = 1e-3
decay              = 200
decay_factor_gamma = 0.5
optimizer          = ADAM
# options: ['ADAM', 'SGD', 'RMSprop']
momentum           = 0.9
# option for SGD
betas              = 0.9, 0.999
# option for ADAM
epsilon            = 1e-8
# option for ADAM
weight_decay       = 0
gclip              = 0
# gradient clip between [-gclip, gclip], 0 means no clipping

[CHECKPOINT]
load               = False
save               = True
reset              = False
data_test          =
# It is going to be used to test custom inputs and save it to results.

[TRAINING]
training           = True
epoch_num          = 200
loss               = 255*MSE
# "5*VGG54+0.15*GAN" # weight*loss_type + weight*loss_type --> two different loss function
skip_thr           = 1e8
# skip if a batch have high error
image_range        = 1
# 255
log_every          = 200
# batch number
validate_every     = 0.4
log_psnr           = True
log_ssim           = False
# Not implemented yet
pre_train          = load_best
# ["download", "PATH/TO/PRE-TRAINED/MODEL", "load_latest", "load_best"]
only_body          = False
# it should be true if transfer knowdlegde from RGB
fine_tuning        = False
# True if you want to start from pre-trained model (It is redundant)
freeze_initial_layers = False
# It freezes desired first layers (developing continues)
chop               = False
# Not used now but it requires for big images
save_models        = False

[TESTING]
test_only          = False
log_test_result    = True
test_single        = False
test_psnr          = True
test_ssim          = False
test_visualize     = False
test_image_save    = False

